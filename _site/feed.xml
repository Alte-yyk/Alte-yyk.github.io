<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-12T15:48:40+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Alte-yyk’s blog</title><subtitle></subtitle><entry><title type="html">『学习笔记03』重学C语言</title><link href="http://localhost:4000/2020/12/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-%E9%87%8D%E5%AD%A6C%E8%AF%AD%E8%A8%80.html" rel="alternate" type="text/html" title="『学习笔记03』重学C语言" /><published>2020-12-09T00:00:00+08:00</published><updated>2020-12-09T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/09/%E3%80%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003%E3%80%8F%E9%87%8D%E5%AD%A6C%E8%AF%AD%E8%A8%80</id><content type="html" xml:base="http://localhost:4000/2020/12/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-%E9%87%8D%E5%AD%A6C%E8%AF%AD%E8%A8%80.html">&lt;h1 id=&quot;学习笔记03重学c语言&quot;&gt;『学习笔记03』重学C语言&lt;/h1&gt;

&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;以下博文均记于该视频，视频链接——&amp;gt;https://m.imooc.com/video/627,感兴趣的小伙伴建议自己去看一遍，总共也就俩小时，冲！&lt;/p&gt;

&lt;h2 id=&quot;c语言&quot;&gt;C语言&lt;/h2&gt;
&lt;p&gt;C语言就是人类为了和计算机交流而发明的一种语言，现在大都所取的标准是美国国家标准局所制定的ANSIC。（没办法，当时这方面，人家是老大哥。）&lt;/p&gt;

&lt;p&gt;C语言的特点：简单快速高性能，兼容性好功能强大又易学。（好像说的都对，相对易学，哈哈哈。）&lt;/p&gt;

&lt;p&gt;C语言适合做啥：我很喜欢视频中老师所说的，适合做小工具，我们可以把每一个功能，例如linux下的cd，该命令的意思是切换路径。该功能就是用C语言写出来的一个功能类，相信看到这里，你已经懂了🤪。
至于其他适合硬件编程，有高性能需求的应用程序什么的，自己去视频看，我也不太懂，尴尬ing&lt;/p&gt;

&lt;h2 id=&quot;开发环境与配置&quot;&gt;开发环境与配置&lt;/h2&gt;
&lt;p&gt;公欲善其事，必先利其器。而对于学习语言来说，开发环境是必须的！&lt;/p&gt;
&lt;h3 id=&quot;环境&quot;&gt;环境&lt;/h3&gt;
&lt;p&gt;安装一个linux操作系统，建议安装ubuntu。两种办法：一是安装一个虚拟机，在虚拟机中安装一个linux系统；一是安装双系统。具体操作，CSDN中有很多文章等着你看呢！冲，我这里就告诉这么些了，嘿嘿！&lt;/p&gt;

&lt;h3 id=&quot;编辑器&quot;&gt;编辑器&lt;/h3&gt;
&lt;p&gt;神的编辑器：vim
sudo apt-get update		//更新
sudo apt-get install vim	//安装&lt;/p&gt;

&lt;h3 id=&quot;基本命令&quot;&gt;基本命令&lt;/h3&gt;
&lt;p&gt;这是我第一个学习笔记，有一些linux的基本命令，可以看一下。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://editor.csdn.net/md/?articleId=110296532&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;多文件操作&quot;&gt;多文件操作&lt;/h2&gt;
&lt;p&gt;个人理解，所谓的多文件操作就是你编写一个代码，可能会需要用到很多类函数，这时候呢，我们就可以把这些类函数单独写出来，每个类函数用一个文件来编写，这样就会有多个文件。&lt;/p&gt;
&lt;h3 id=&quot;多个源文件分而治之&quot;&gt;多个源文件分而治之&lt;/h3&gt;
&lt;p&gt;一个代码的运行往往需要很多头文件，其实&lt;stdio.h&gt;就是一个头文件，在Linux C中，我们可以自己定义头文件，例如你需要引用求最大值这个功能，就可以定义一个名为 max.c 的文件，其内容就是求最大值，里面不需要main函数。这里列个图。 
![在这里插入图片](https://img-blog.csdnimg.cn/20201211121349522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTEzNzc0,size_16,color_FFFFFF,t_70#pic_center)&lt;/stdio.h&gt;&lt;/p&gt;

&lt;h3 id=&quot;头文件与函数定义分离&quot;&gt;头文件与函数定义分离&lt;/h3&gt;
&lt;p&gt;根据分治章，我们知道了我们可以自行定义头文件，但在这里，我们要不要直接引用max.c这个头文件，头文件也就是在main函数代码编译之前，先翻译的代码，如果你自行定义的头文件巨多，那你一个代码的编译过程也就会超长，这样效率问题就出现了。
为了解决这个问题，我们可以提前翻译我们的头文件，然后在编译执行代码时，只需要把有main函数的文件与翻译好的头文件连接即可。
上图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201211122841236.png#pic_center&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -c max.c -o max.o	//把max.c 翻译成名为 max.o 的文件，max.o文件是给计算机看的
gcc max.o min.o hello.c	//编译hello.c时连接翻译好的max.c的文件和min.c文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通常我们把：不会改动的函数、公共框架、公共类，翻译生成静态库。（公共框架，静态库啥的，想知道的百度，反正我现在是懵的🤪）&lt;/p&gt;

&lt;p&gt;max.h和max.c和max.o三者的定义与区别&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;max.h是一个用来注释性的文件，它的存在是为了告诉其他编程者我们这个main函数中调用了max这个函数。
max.c是我们编写求最大值这个功能的源代码，给人看的。
max.o是编译完成后的max.c，用来给计算机看的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意：编写max.h这类自定义头文件时，记得每句结尾加上结束符 “；”。（就因为这玩意，我用了五分钟找bug，还去百度，把我给气笑了…）&lt;/p&gt;

&lt;h2 id=&quot;makefile的编写与使用&quot;&gt;makeFile的编写与使用&lt;/h2&gt;
&lt;h3 id=&quot;makefile这是文件名似乎一定要这样先这样&quot;&gt;Makefile(这是文件名，似乎一定要这样，先这样。)&lt;/h3&gt;
&lt;p&gt;Makefile一个文件，作用就是把之前编译的代码写在一起，然后一并执行。上图解释
&lt;img src=&quot;https://img-blog.csdnimg.cn/20201211164705268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTEzNzc0,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;#在这个文件中是注释符号，就#后面的内容执行时会被忽略。
图片蓝色的hello.out		//项目执行文件
图片中白色的max.o		//目标文件
图片中紫色的语句			//编译语句&lt;/p&gt;

&lt;p&gt;在终端输入make命令，便会自动执行Makefile文件。
执行顺序：从上往下，递归方式。&lt;/p&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;p&gt;现在你没有max.o min.o hello.out文件，先是编译hello.out,在编译hello.out时，发现没有max.o，它便自动寻找编译max.o的语句，min.o也是如此，直到有了max.o和min.o文件，在编译hello.out文件。&lt;/p&gt;

&lt;p&gt;如果你一开始就已经有了max.o和min.o，则不会运行下面两条语句了。&lt;/p&gt;

&lt;h3 id=&quot;make&quot;&gt;make&lt;/h3&gt;
&lt;p&gt;make也是类似cd一类的小工具，它可以把一个大的开发项目分成很多个模块（分治？），可以很清晰快捷的整理源文件。&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make -v						//用来查看你当前ubuntu系统中的make版本
sudo apt-get install make	//安装make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;main函数详解这节强推看教程很nice&quot;&gt;main函数详解(这节强推看教程，很Nice！)&lt;/h2&gt;
&lt;p&gt;这里先上一段基本的代码&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(int argv,char* argc[])
{
	printf(&quot;argv is %d .\n&quot;,argv);
	int i;
	for(i=0;i&amp;lt;argv;i++)
	{
		printf(&quot;argc[%d] is %s .\n&quot;,i,argc[i]);
	}
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;C语言是一门强大的语言，它是可以与计算机操作系统进行交互的。在一个main函数中，交互的手段就是return 和 argv 还有 argc[]。下面就简单描述一下它们的作用。&lt;/p&gt;

&lt;h3 id=&quot;return&quot;&gt;return&lt;/h3&gt;
&lt;p&gt;return 0；返回一个0，即当你运行完这个代码后，它会返回一个值，而系统根据这个运算值，来判断该语句是否成功运行。
&lt;img src=&quot;https://img-blog.csdnimg.cn/20201212111353295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTEzNzc0,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp;&amp;amp;			//linux命令语句中的连接符，左边的语句运行成功后，才会运行右边的语句。
echo $? 	//把返回码(错误码)输出到终端上	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;int-argv-与-char-argc&quot;&gt;int argv 与 char* argc[]&lt;/h3&gt;
&lt;p&gt;argv 是一个整形值，值是你运行的那条命令中语句的个数。
argc[] 字符数组，每个数组保存的是你的命令。
这里结合上面那个图，就明了了。&lt;/p&gt;

&lt;h2 id=&quot;输入输出流与错误流&quot;&gt;输入输出流与错误流&lt;/h2&gt;
&lt;p&gt;linux把所有的外设都当作文件来处理，键盘、显示器、鼠标、打印机等等设备，对linux来说，都是文件。&lt;/p&gt;
&lt;h3 id=&quot;标准的输入流输出流以及错误流&quot;&gt;标准的输入流输出流以及错误流&lt;/h3&gt;
&lt;p&gt;stdin:	标准的输入流，向外设读取数据，默认为键盘。
stdout:	标准的输出流，向外设输出数据，默认为显示器。
stderr:	错误流，要有返回值，且返回值不能等于0。（我认为是用来和操作系统交互的，哈哈哈，其实错误流也一般默认输出到显示器，就标准的输出流输出正确情况下的咯，错误流那不久输出错误情况下的咯。）&lt;/p&gt;

&lt;h3 id=&quot;输入流输出流以及错误流的重定向&quot;&gt;输入流输出流以及错误流的重定向&lt;/h3&gt;
&lt;p&gt;重定向：顾名思义，重新制定方向。举个例子，标准的输入流默认的为键盘，我们可以把输入的改成用txt文件来输入，这就是重定向。&lt;/p&gt;

&lt;p&gt;重定向输入流：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a.out &amp;lt; b.txt	//	把标准输入流改为txt文件内容来输入
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重定向输出流：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a.out &amp;gt;&amp;gt; a.txt	// 把标准输出流改为输出到txt文件中，不会覆盖里面的内容。（适用日志，内容放在末尾。） 
a.out &amp;gt;  a.txt	//把标准输出流改为输出到txt文件中，会覆盖里面内容。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重定向错误流&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a.out &amp;gt;&amp;gt; f.txt	/大致同上。
a.out &amp;gt;  f.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重定向的作用：就可以把你输入输出错误分别开来，还能顺便记录下来。（写日记？正经人谁写日记啊？555，程序员不是正经人了…）&lt;/p&gt;

&lt;h2 id=&quot;管道&quot;&gt;管道&lt;/h2&gt;
&lt;p&gt;管道就一个把独立的小工具连接起来的桥梁，非常流弊的一个玩意。举个🌰。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ls /etc/&lt;/td&gt;
      &lt;td&gt;grep ab&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;这个命令我们分解以下，ls /etc/ 这个命令是把etc文件下的所有内容列出来，&lt;/td&gt;
      &lt;td&gt;这个就是管道，（就很形象有木有？）grep是一个搜索命令，grep ab 就是搜索所有文件名中包含ab这个字符串的文件。所以整行命令的意思为，列出etc目录下所有包含ab字符串的文件，&lt;/td&gt;
      &lt;td&gt;起连接作用。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;打造自己的小工具&quot;&gt;打造自己的小工具&lt;/h2&gt;
&lt;p&gt;这个就是你自己写俩简单独立的函数功能，例如一个输入求和，一个输入求平均值，然后利用管道连接起来，你就可以又求和有算出平均值，类似如此作用。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;这个博客我至今为止写的最多一个博客了吧，记录我看这个两小时教程的所有体会与理解，重新认识一次C语言，也重新学到了一些新的东西，nice！！！&lt;/p&gt;

&lt;h2 id=&quot;总体时间2020-12-09--2020-12-12&quot;&gt;总体时间：2020-12-09 ——&amp;gt; 2020-12-12&lt;/h2&gt;</content><author><name>Alte-yyk</name></author><summary type="html">『学习笔记03』重学C语言</summary></entry><entry><title type="html">『学习笔记02』用github和jekyll和git来搭建自己的博客</title><link href="http://localhost:4000/2020/12/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E7%94%A8github%E5%92%8Cjekyll%E5%92%8Cgit%E6%9D%A5%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2.html" rel="alternate" type="text/html" title="『学习笔记02』用github和jekyll和git来搭建自己的博客" /><published>2020-12-06T00:00:00+08:00</published><updated>2020-12-06T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/06/%E3%80%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002%E3%80%8F%E7%94%A8github%E5%92%8Cjekyll%E5%92%8Cgit%E6%9D%A5%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2</id><content type="html" xml:base="http://localhost:4000/2020/12/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E7%94%A8github%E5%92%8Cjekyll%E5%92%8Cgit%E6%9D%A5%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2.html">&lt;h1 id=&quot;学习笔记02用github和jekyll和git来搭建自己的博客&quot;&gt;『学习笔记02』用github和jekyll和git来搭建自己的博客&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;用这篇博客来记录自己如何从0到1搭建自己的简易博客，本人系统：unbuntu。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;jekyll&quot;&gt;jekyll&lt;/h2&gt;

&lt;p&gt;Jekyll 是一个简单的博客形态的静态站点生产机器。官方定义？我从现识认为，Jekyll就是一个它为你提供网页前端等一系列框架操作，如果你不会操作的话，就这样。我现在只需要写博客即可。&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

  	sudo apt install jekyll			//安装jekyll

  	sudo apt install bundler		//安装bundler

  	jekyll new my-blog				//新建jekyll文件夹

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd my-blog 						//进入文件夹

bundle install

bundle exec jekyll serve 		//编译并启动服务

//打开浏览器 http://localhost:4000来检测是否启动成功
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;详细教程请移步http://jekyllcn.com/docs/installation/&lt;/p&gt;
  &lt;h3 id=&quot;ruby-gems更换国内源&quot;&gt;Ruby-Gems更换国内源&lt;/h3&gt;
  &lt;p&gt;若是用的Ruby-Gems来安装jekyll，国内需要换源，否则会很慢，别问我为什么知道的…&lt;/p&gt;
&lt;/blockquote&gt;

 	1.查看现有源：gem sources -l

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2.删除现有源：gem sources --remove https://rubygems.org/

3.添加新源：gem sources -a http://gems.ruby-china.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git&quot;&gt;Git&lt;/h2&gt;
&lt;p&gt;Git是一种版本控制系统，作用呢，我打个比方🤪，就类似那些单机RPG游戏中存档功能，且每一次都会给你重新选个空白档存档，不会复制以前的存档，这样你就可以随时回到以前的一个状态。（单机游戏玩多了是这样的，哈哈哈…错乱ing）&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;具体学习教程自己看书，这是电子书，冲！——&amp;gt;https://git-scm.com/book/zh/v2/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;安装-1&quot;&gt;安装&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install git 					//ubuntu安装git

git config --global user.name &quot;你的名字&quot; 	//设置名字

git config --global user.email &quot;你的邮箱地址&quot; //设置邮箱
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;github&quot;&gt;github&lt;/h2&gt;
&lt;p&gt;至于什么github的账号注册，仓库建立什么的，我这里就不说了，网上多的是，这里就讲述一下，在你安装jekyll之后，如何建立一个属于自己域名博客，而不是本地博客。（本地博客就是那个http://localhost:4000）&lt;/p&gt;

&lt;h3 id=&quot;在自己有远程仓库的情况下&quot;&gt;在自己有远程仓库的情况下&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd myblog 						//进入自己创的文件夹

git clone git@github.com:github.name/github.warehosename 				
//克隆远程仓库，github.name为你注册github的账户名，github.warehosename为你创建的远程仓库名。

jekyll new . --force			//把jekyll安装到当前目录 --force是在当前目录非空是使用。

git add .						// 把当前目录下的所有文件都跟踪
	
git commit -m &quot;first commit&quot; 	//设置一段提交的log信息

git remote add origin git@github.com:github.name/github.warehosename 
								//增加一个远程服务器端
								
git push -u origin main 		//推送至远程版本库
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后就可以进入到自己刚刚克隆的远程仓库了，进入settings，滑道网页底部。
这个沉浸在绿光的，冒着蓝色的域名，就是你的博客！
htpps://alte-yyk.github.io/ 这是我自己弄的博客，大家可以进去瞅瞅。
&lt;img src=&quot;https://img-blog.csdnimg.cn/20201207170424470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTEzNzc0,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;</content><author><name>“Alte-yyk”</name></author><summary type="html">『学习笔记02』用github和jekyll和git来搭建自己的博客</summary></entry><entry><title type="html">Git基础</title><link href="http://localhost:4000/2020/12/05/Git%E5%9F%BA%E7%A1%80.html" rel="alternate" type="text/html" title="Git基础" /><published>2020-12-05T00:00:00+08:00</published><updated>2020-12-05T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/05/Git%E5%9F%BA%E7%A1%80</id><content type="html" xml:base="http://localhost:4000/2020/12/05/Git%E5%9F%BA%E7%A1%80.html">&lt;h1 id=&quot;git-笔记&quot;&gt;Git 笔记&lt;/h1&gt;

&lt;h2 id=&quot;git的概念&quot;&gt;Git的概念&lt;/h2&gt;

&lt;p&gt;Git是一种版本控制系统，所谓的版本控制系统便是记录各个版本，以便人们可以随时找回以前的原始数据，打个比方，类似与RPG游戏中的存档读档功能。（如果人生也可以存档读档就好了！）&lt;/p&gt;

&lt;h2 id=&quot;git的特点&quot;&gt;Git的特点&lt;/h2&gt;

&lt;p&gt;直接记录快照，而非差异比较。（意思是每个版本都信息都做成链接保存？）&lt;/p&gt;

&lt;p&gt;近乎所有操作都是本地运行。（不受网络限制）&lt;/p&gt;

&lt;p&gt;Git保证完整性。（哈希值）&lt;/p&gt;

&lt;p&gt;Git一般只添加数据。（这样不会容易造成不可恢复操作）&lt;/p&gt;

&lt;h2 id=&quot;git的三种状态&quot;&gt;Git的三种状态&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;已提交（committed）&lt;/strong&gt;、&lt;strong&gt;已修改（modified）&lt;/strong&gt; 和 &lt;strong&gt;已暂存（staged）&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;已修改表示修改了文件，但还没保存到数据库中。&lt;/li&gt;
  &lt;li&gt;已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。&lt;/li&gt;
  &lt;li&gt;已提交表示数据已经安全地保存在本地数据库中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git的安装ubuntu我用的ubuntu&quot;&gt;Git的安装（ubuntu）（我用的ubuntu）&lt;/h2&gt;

&lt;p&gt;sudo apt install git-all（其他方法自己去找）&lt;/p&gt;

&lt;h2 id=&quot;初次运行git前的配置&quot;&gt;初次运行Git前的配置&lt;/h2&gt;

&lt;p&gt;git config –list –show-origin	//查看所有配置以及它所在文件&lt;/p&gt;

&lt;h3 id=&quot;用户信息&quot;&gt;用户信息&lt;/h3&gt;

&lt;p&gt;git config –global user.name “yyk”&lt;/p&gt;

&lt;p&gt;git config –global user.email “1812509145@qq.com”&lt;/p&gt;

&lt;h3 id=&quot;检查配置信息&quot;&gt;检查配置信息&lt;/h3&gt;

&lt;p&gt;git config –list&lt;/p&gt;

&lt;h3 id=&quot;获取帮助&quot;&gt;获取帮助&lt;/h3&gt;

&lt;p&gt;git help &lt;vebr&gt;&lt;/vebr&gt;&lt;/p&gt;

&lt;p&gt;git &lt;vebr&gt; --help&lt;/vebr&gt;&lt;/p&gt;

&lt;p&gt;man git-&lt;vebr&gt;&lt;/vebr&gt;&lt;/p&gt;

&lt;h2 id=&quot;取得项目的git仓库&quot;&gt;取得项目的Git仓库&lt;/h2&gt;

&lt;h3 id=&quot;在工作目录中初始化新仓库&quot;&gt;在工作目录中初始化新仓库&lt;/h3&gt;

&lt;p&gt;命令：git init&lt;/p&gt;

&lt;h3 id=&quot;从现有仓库克隆&quot;&gt;从现有仓库克隆&lt;/h3&gt;

&lt;p&gt;命令：git clone git://github.com/&lt;/p&gt;

&lt;h2 id=&quot;仓库记录更新&quot;&gt;仓库记录更新&lt;/h2&gt;

&lt;h3 id=&quot;检查当前文件状态&quot;&gt;检查当前文件状态&lt;/h3&gt;

&lt;p&gt;命令：git status&lt;/p&gt;

&lt;h3 id=&quot;跟踪新文件&quot;&gt;跟踪新文件&lt;/h3&gt;

&lt;p&gt;命令：git add &lt;filename&gt; (跟踪后，该文件便是暂存文件了)&lt;/filename&gt;&lt;/p&gt;

&lt;h3 id=&quot;文件忽略&quot;&gt;文件忽略&lt;/h3&gt;

&lt;p&gt;创建一个名为.gitignore的文件&lt;/p&gt;

&lt;p&gt;文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 的格式规范如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有空行或者以 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 开头的行都会被 Git 忽略。&lt;/li&gt;
  &lt;li&gt;可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。&lt;/li&gt;
  &lt;li&gt;匹配模式可以以（&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;）开头防止递归。&lt;/li&gt;
  &lt;li&gt;匹配模式可以以（&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;）结尾指定目录。&lt;/li&gt;
  &lt;li&gt;要忽略指定模式以外的文件或目录，可以在模式前加上叹号（&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;）取反。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;查看修改的部分&quot;&gt;查看修改的部分&lt;/h3&gt;

&lt;p&gt;git diff&lt;/p&gt;

&lt;h3 id=&quot;提交更新&quot;&gt;提交更新&lt;/h3&gt;

&lt;p&gt;命令：git commit&lt;/p&gt;

&lt;h3 id=&quot;移除与移动&quot;&gt;移除与移动&lt;/h3&gt;

&lt;p&gt;git rm &lt;文件&gt;&lt;/文件&gt;&lt;/p&gt;

&lt;p&gt;git mv README.md README	//把文件名字从README.md改成README&lt;/p&gt;

&lt;h2 id=&quot;远程仓库的使用&quot;&gt;远程仓库的使用&lt;/h2&gt;

&lt;p&gt;git remote -v	//查看你已经配置的远程仓库&lt;/p&gt;

&lt;p&gt;git remote add origin https://github.com/username/warehose 	//通过http,username为github的用户名，warehose为仓库名，origin这个字符串则代表整个URL&lt;/p&gt;

&lt;p&gt;git remote add origin git@github:username/warehose 		//通过SSH来添加，在配置完SSH密钥后，可以免密登陆。&lt;/p&gt;

&lt;p&gt;git fetch &lt;remote&gt;	//获取远程仓库数据&lt;/remote&gt;&lt;/p&gt;

&lt;p&gt;git push &lt;remote&gt;	//推送本地数据到远程仓库&lt;/remote&gt;&lt;/p&gt;

&lt;p&gt;git remote show origin 	//查看远程仓库，origin为本地名&lt;/p&gt;

&lt;p&gt;git remote rename pb paul	//修改远程仓库名字，这里是把pb改成paul&lt;/p&gt;

&lt;p&gt;git remote remove paul		//移除远程仓库&lt;/p&gt;</content><author><name>“Alte-yyk”</name></author><summary type="html">Git 笔记</summary></entry><entry><title type="html">Ubuntu关于SSH的安装与使用</title><link href="http://localhost:4000/2020/12/05/ubuntu%E5%85%B3%E4%BA%8ESSh%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.html" rel="alternate" type="text/html" title="Ubuntu关于SSH的安装与使用" /><published>2020-12-05T00:00:00+08:00</published><updated>2020-12-05T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/05/ubuntu%E5%85%B3%E4%BA%8ESSh%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8</id><content type="html" xml:base="http://localhost:4000/2020/12/05/ubuntu%E5%85%B3%E4%BA%8ESSh%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.html">&lt;h1 id=&quot;ubuntu关于ssh的安装与使用&quot;&gt;Ubuntu关于SSH的安装与使用&lt;/h1&gt;

&lt;h2 id=&quot;一在ubuntu上启用ssh&quot;&gt;一、在Ubuntu上启用SSH&lt;/h2&gt;

&lt;p&gt;sudo apt update  	//检查ubuntu的更新&lt;/p&gt;

&lt;p&gt;sudo apt install openssh-server	//安装openssh-server&lt;/p&gt;

&lt;p&gt;sudo systemctl status ssh	//验证SSH是否在运行&lt;/p&gt;

&lt;p&gt;sudo ufw allow ssh	//打开SSH端口&lt;/p&gt;

&lt;h2 id=&quot;二连接到ssh服务器&quot;&gt;二、连接到SSH服务器&lt;/h2&gt;

&lt;p&gt;ssh username@ip_address	//username是你的用户名，ip_address是你安装ssh的IP地址。&lt;/p&gt;

&lt;p&gt;ip a 	//来查看自己系统的ip地址&lt;/p&gt;

&lt;h2 id=&quot;三在ubuntu上禁用ssh&quot;&gt;三、在Ubuntu上禁用SSH&lt;/h2&gt;

&lt;p&gt;sudo systemctl disable 	–now ssh	//停止&lt;/p&gt;

&lt;p&gt;sudo systemctl enable      –now ssh	//重新启用&lt;/p&gt;</content><author><name>“Alte-yyk”</name></author><summary type="html">Ubuntu关于SSH的安装与使用</summary></entry><entry><title type="html">『学习笔记』Linux的基本操作</title><link href="http://localhost:4000/2020/11/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Linux%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html" rel="alternate" type="text/html" title="『学习笔记』Linux的基本操作" /><published>2020-11-28T00:00:00+08:00</published><updated>2020-11-28T00:00:00+08:00</updated><id>http://localhost:4000/2020/11/28/%E3%80%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8FLinux%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C</id><content type="html" xml:base="http://localhost:4000/2020/11/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Linux%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html">&lt;h1 id=&quot;学习笔记linux的基本操作&quot;&gt;『学习笔记』Linux的基本操作&lt;/h1&gt;

&lt;h1 id=&quot;提示&quot;&gt;提示&lt;/h1&gt;
&lt;p&gt;&amp;lt;&amp;gt;为必填、[]为选填&lt;/p&gt;
&lt;h2 id=&quot;路径&quot;&gt;路径&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;绝对路径：路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。

相对路径：路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd ../man 这就是相对路径的写法。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;通配符&quot;&gt;通配符&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*匹配 0 或多个字符
? 	匹配任意一个字符
[list] 	匹配 list 中的任意单一字符
[^list] 	匹配 除 list 中的任意单一字符以外的字符
[c1-c2] 	匹配 c1-c2 中的任意单一字符 如：[0-9][a-z]
{string1,string2,...} 	匹配 string1 或 string2 (或更多)其一字符串
{c1..c2} 	匹配 c1-c2 中全部字符 如{1..10}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;目录命令常用&quot;&gt;目录命令（常用）&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls（英文全拼：list files）: 列出目录及文件名
	格式：ls
	
cd（英文全拼：change directory）：切换目录
	格式：cd [相对路径或绝对路径]
	
pwd（英文全拼：print work directory）：显示目前的目录
 	格式：pwd
 	
mkdir（英文全拼：make directory）：创建一个新的目录
	格式：mkdir &amp;lt;目录名称&amp;gt;
	
rmdir（英文全拼：remove directory）：删除一个空的目录
	格式：rmdir &amp;lt;目录名称&amp;gt;

cp（英文全拼：copy file）: 复制文件或目录

rm（英文全拼：remove）: 移除文件或目录
	格式：rm &amp;lt;文件或目录&amp;gt;		tips：-r 参数递归删除，可删除目录

mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称
	格式：	mv &amp;lt;源文件&amp;gt; &amp;lt;目的地&amp;gt;
				mv &amp;lt;原文件名&amp;gt; &amp;lt;新的文件名&amp;gt; ## 用户管理
添加：useradd &amp;lt;用户名&amp;gt;
删除：userdel &amp;lt;用户名&amp;gt;
修改账户名：usermod &amp;lt;用户名&amp;gt;
密码管理：passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;用户组管理&quot;&gt;用户组管理&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;增加：groupadd &amp;lt;用户组&amp;gt;
删除：groupdel &amp;lt;用户组&amp;gt;
修改：groupmod &amp;lt;用户组&amp;gt;
用户有多个用户组的切换用户组：newgrp &amp;lt;用户组&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;权限管理&quot;&gt;权限管理&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;权限解释图 ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201128232952963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTEzNzc0,size_16,color_FFFFFF,t_70)

权限修改：chmod xxx &amp;lt;user&amp;gt;
	tip: chmod为修改权限命令；x为0-7的数字，0 = 000、 7 = 111（二进制转换） &amp;lt;user&amp;gt;为文件名。
	
赋予root权限
 
	方法一： 修改 /etc/sudoers 文件，找到下面一行，把前面的注释（#）去掉
	 
	## Allows people in group wheel to run all commands
	%wheel    ALL=(ALL)    ALL
	然后修改用户，使其属于root组（wheel），命令如下：
	 
	#usermod -g root tommy
	修改完毕，现在可以用tommy帐号登录，然后用命令 su - ，即可获得root权限进行操作。
	 
	方法二： 修改 /etc/sudoers 文件，找到下面一行，在root下面添加一行，如下所示：
	 
	## Allow root to run any commands anywhere
	root    ALL=(ALL)     ALL
	tommy   ALL=(ALL)     ALL
	修改完毕，现在可以用tommy帐号登录，然后用命令 su - ，即可获得root权限进行操作。
	 
	方法三： 修改 /etc/passwd 文件，找到如下行，把用户ID修改为 0 ，如下所示：
	 
	tommy:x:500:500:tommy:/home/tommy:/bin/bash
	修改后如下
	 
	tommy:x:0:500:tommy:/home/tommy:/bin/bash
	保存，用tommy账户登录后，直接获取的就是root帐号的权限。
	 
	友情提醒：虽然方法三看上去简单方便，但一般不推荐使用，推荐使用方法二。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;磁盘管理&quot;&gt;磁盘管理&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df：列出文件系统的整体磁盘使用量
	格式:df [-ahikHTm] [目录或文件名]
	    -a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；
	    -k ：以 KBytes 的容量显示各文件系统；
	    -m ：以 MBytes 的容量显示各文件系统；
	    -h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；
	    -H ：以 M=1000K 取代 M=1024K 的进位方式；
	    -T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；
	    -i ：不用硬盘容量，而以 inode 的数量来显示
	
du：检查磁盘空间使用量
	格式：du [-ahskm] 文件或目录名称
	    -a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。
	    -h ：以人们较易读的容量格式 (G/M) 显示；
	    -s ：列出总量而已，而不列出每个各别的目录占用容量；
	    -S ：不包括子目录下的总计，与 -s 有点差别。
	    -k ：以 KBytes 列出容量显示；
	    -m ：以 MBytes 列出容量显示；
	
fdisk：用于磁盘分区
	格式：fdisk [-l] 装置名称
		-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。

mkfs:  磁盘格式化
	格式：mkfs [-t 文件系统格式] 装置文件名
		-t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效) 
	
fsck: 磁盘检验 
	格式：fsck [-t 文件系统] [-ACay] 装置名称
		
	     -t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数
	    -s : 依序一个一个地执行 fsck 的指令来检查
	    -A : 对/etc/fstab 中所有列出来的 分区（partition）做检查
	    -C : 显示完整的检查进度
	    -d : 打印出 e2fsck 的 debug 结果
	    -p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行
	    -R : 同时有 -A 条件时，省略 / 不检查
	    -V : 详细显示模式
	    -a : 如果检查有错则自动修复
	    -r : 如果检查有错则由使用者回答是否修复
	    -y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;硬链接与软链接&quot;&gt;硬链接与软链接&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;硬链接：新建的文件是已du经存在的文件的一个别名，当原文zhi件删除时，新建的文件仍dao然可以使用.（ln）

软链接：也称为符号链接，新建的文件以“路径”的形式来表示另一个文件，和Windows的快捷方式十分相似，新建的软链接可以指向不存在的文件.(ln -s)
	
tip:软链接在同目录下创建命令行可用相对路径，如何目的路径与源路径不同，则需绝对路径，否则会造成链接失效。（但还是会创建，笑了。）	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;菜鸟教程
百度百科&lt;/p&gt;</content><author><name>“Alte-yyk”</name></author><summary type="html">『学习笔记』Linux的基本操作</summary></entry></feed>